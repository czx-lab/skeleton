// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	"skeleton/app/model"
)

func newUserModel(db *gorm.DB, opts ...gen.DOOption) userModel {
	_userModel := userModel{}

	_userModel.userModelDo.UseDB(db, opts...)
	_userModel.userModelDo.UseModel(&model.UserModel{})

	tableName := _userModel.userModelDo.TableName()
	_userModel.ALL = field.NewAsterisk(tableName)
	_userModel.ID = field.NewInt32(tableName, "id")
	_userModel.Name = field.NewString(tableName, "name")
	_userModel.Age = field.NewInt32(tableName, "age")
	_userModel.Address = field.NewString(tableName, "address")
	_userModel.Role = field.NewString(tableName, "role")
	_userModel.Rule = field.NewString(tableName, "rule")
	_userModel.UpdateTime = field.NewField(tableName, "update_time")

	_userModel.fillFieldMap()

	return _userModel
}

type userModel struct {
	userModelDo

	ALL        field.Asterisk
	ID         field.Int32
	Name       field.String
	Age        field.Int32
	Address    field.String
	Role       field.String
	Rule       field.String
	UpdateTime field.Field

	fieldMap map[string]field.Expr
}

func (u userModel) Table(newTableName string) *userModel {
	u.userModelDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userModel) As(alias string) *userModel {
	u.userModelDo.DO = *(u.userModelDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userModel) updateTableName(table string) *userModel {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.Name = field.NewString(table, "name")
	u.Age = field.NewInt32(table, "age")
	u.Address = field.NewString(table, "address")
	u.Role = field.NewString(table, "role")
	u.Rule = field.NewString(table, "rule")
	u.UpdateTime = field.NewField(table, "update_time")

	u.fillFieldMap()

	return u
}

func (u *userModel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userModel) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 7)
	u.fieldMap["id"] = u.ID
	u.fieldMap["name"] = u.Name
	u.fieldMap["age"] = u.Age
	u.fieldMap["address"] = u.Address
	u.fieldMap["role"] = u.Role
	u.fieldMap["rule"] = u.Rule
	u.fieldMap["update_time"] = u.UpdateTime
}

func (u userModel) clone(db *gorm.DB) userModel {
	u.userModelDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userModel) replaceDB(db *gorm.DB) userModel {
	u.userModelDo.ReplaceDB(db)
	return u
}

type userModelDo struct{ gen.DO }

type IUserModelDo interface {
	gen.SubQuery
	Debug() IUserModelDo
	WithContext(ctx context.Context) IUserModelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserModelDo
	WriteDB() IUserModelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserModelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserModelDo
	Not(conds ...gen.Condition) IUserModelDo
	Or(conds ...gen.Condition) IUserModelDo
	Select(conds ...field.Expr) IUserModelDo
	Where(conds ...gen.Condition) IUserModelDo
	Order(conds ...field.Expr) IUserModelDo
	Distinct(cols ...field.Expr) IUserModelDo
	Omit(cols ...field.Expr) IUserModelDo
	Join(table schema.Tabler, on ...field.Expr) IUserModelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserModelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserModelDo
	Group(cols ...field.Expr) IUserModelDo
	Having(conds ...gen.Condition) IUserModelDo
	Limit(limit int) IUserModelDo
	Offset(offset int) IUserModelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserModelDo
	Unscoped() IUserModelDo
	Create(values ...*model.UserModel) error
	CreateInBatches(values []*model.UserModel, batchSize int) error
	Save(values ...*model.UserModel) error
	First() (*model.UserModel, error)
	Take() (*model.UserModel, error)
	Last() (*model.UserModel, error)
	Find() ([]*model.UserModel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserModel, err error)
	FindInBatches(result *[]*model.UserModel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserModel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserModelDo
	Assign(attrs ...field.AssignExpr) IUserModelDo
	Joins(fields ...field.RelationField) IUserModelDo
	Preload(fields ...field.RelationField) IUserModelDo
	FirstOrInit() (*model.UserModel, error)
	FirstOrCreate() (*model.UserModel, error)
	FindByPage(offset int, limit int) (result []*model.UserModel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserModelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FindByNameAndAge(name string, age int) (result model.UserModel, err error)
	FindBySimpleName() (result []model.UserModel, err error)
	FindByIDOrName(cond1 bool, id int, col string, name string) (result model.UserModel, err error)
	FindAll() (result []map[string]interface{}, err error)
	FindOne() (result map[string]interface{})
	FindAddress() (result model.UserModel, err error)
	FindByID(id int) (result model.UserModel, err error)
	FindAdult() (result []model.UserModel, err error)
	FindByRole(role string, id int)
	UpdateUserName(name string, id int) (err error)
}

// Where("name=@name and age=@age")
func (u userModelDo) FindByNameAndAge(name string, age int) (result model.UserModel, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, name)
	params = append(params, age)
	generateSQL.WriteString("name=? and age=? ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Where(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// sql(select id,name,age from user where age>18)
func (u userModelDo) FindBySimpleName() (result []model.UserModel, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("select id,name,age from user where age>18 ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// sql(select id,name,age from @@table where age>18
// {{if cond1}}and id=@id {{end}}
// {{if name == ""}}and @@col=@name{{end}})
func (u userModelDo) FindByIDOrName(cond1 bool, id int, col string, name string) (result model.UserModel, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("select id,name,age from users where age>18 ")
	if cond1 {
		params = append(params, id)
		generateSQL.WriteString("and id=? ")
	}
	if name == "" {
		params = append(params, name)
		generateSQL.WriteString("and " + u.Quote(col) + "=? ")
	}

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// sql(select * from user)
func (u userModelDo) FindAll() (result []map[string]interface{}, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("select * from user ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// sql(select * from user limit 1)
func (u userModelDo) FindOne() (result map[string]interface{}) {
	var generateSQL strings.Builder
	generateSQL.WriteString("select * from user limit 1 ")

	result = make(map[string]interface{})
	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String()).Take(result) // ignore_security_alert
	_ = executeSQL

	return
}

// sql(select address from user limit 1)
func (u userModelDo) FindAddress() (result model.UserModel, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("select address from user limit 1 ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// where(id=@id)
func (u userModelDo) FindByID(id int) (result model.UserModel, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("id=? ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Where(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// select * from users where age>18
func (u userModelDo) FindAdult() (result []model.UserModel, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("select * from users where age>18 ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// select * from @@table
//
//	{{where}}
//		{{if role=="user"}}
//			id=@id
//		{{else if role=="admin"}}
//			role="user" or rule="normal-admin"
//		{{else}}
//			role="user" or role="normal-admin" or role="admin"
//		{{end}}
//	{{end}}
func (u userModelDo) FindByRole(role string, id int) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("select * from users ")
	var whereSQL0 strings.Builder
	if role == "user" {
		params = append(params, id)
		whereSQL0.WriteString("id=? ")
	} else if role == "admin" {
		whereSQL0.WriteString("role=\"user\" or rule=\"normal-admin\" ")
	} else {
		whereSQL0.WriteString("role=\"user\" or role=\"normal-admin\" or role=\"admin\" ")
	}
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	_ = executeSQL

	return
}

// update users
//
//	{{set}}
//		update_time=now(),
//		{{if name != ""}}
//			name=@name
//		{{end}}
//	{{end}}
//
// where id=@id
func (u userModelDo) UpdateUserName(name string, id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("update users ")
	var setSQL0 strings.Builder
	setSQL0.WriteString("update_time=now(), ")
	if name != "" {
		params = append(params, name)
		setSQL0.WriteString("name=? ")
	}
	helper.JoinSetBuilder(&generateSQL, setSQL0)
	params = append(params, id)
	generateSQL.WriteString("where id=? ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (u userModelDo) Debug() IUserModelDo {
	return u.withDO(u.DO.Debug())
}

func (u userModelDo) WithContext(ctx context.Context) IUserModelDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userModelDo) ReadDB() IUserModelDo {
	return u.Clauses(dbresolver.Read)
}

func (u userModelDo) WriteDB() IUserModelDo {
	return u.Clauses(dbresolver.Write)
}

func (u userModelDo) Session(config *gorm.Session) IUserModelDo {
	return u.withDO(u.DO.Session(config))
}

func (u userModelDo) Clauses(conds ...clause.Expression) IUserModelDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userModelDo) Returning(value interface{}, columns ...string) IUserModelDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userModelDo) Not(conds ...gen.Condition) IUserModelDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userModelDo) Or(conds ...gen.Condition) IUserModelDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userModelDo) Select(conds ...field.Expr) IUserModelDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userModelDo) Where(conds ...gen.Condition) IUserModelDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userModelDo) Order(conds ...field.Expr) IUserModelDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userModelDo) Distinct(cols ...field.Expr) IUserModelDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userModelDo) Omit(cols ...field.Expr) IUserModelDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userModelDo) Join(table schema.Tabler, on ...field.Expr) IUserModelDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userModelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserModelDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userModelDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserModelDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userModelDo) Group(cols ...field.Expr) IUserModelDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userModelDo) Having(conds ...gen.Condition) IUserModelDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userModelDo) Limit(limit int) IUserModelDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userModelDo) Offset(offset int) IUserModelDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userModelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserModelDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userModelDo) Unscoped() IUserModelDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userModelDo) Create(values ...*model.UserModel) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userModelDo) CreateInBatches(values []*model.UserModel, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userModelDo) Save(values ...*model.UserModel) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userModelDo) First() (*model.UserModel, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserModel), nil
	}
}

func (u userModelDo) Take() (*model.UserModel, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserModel), nil
	}
}

func (u userModelDo) Last() (*model.UserModel, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserModel), nil
	}
}

func (u userModelDo) Find() ([]*model.UserModel, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserModel), err
}

func (u userModelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserModel, err error) {
	buf := make([]*model.UserModel, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userModelDo) FindInBatches(result *[]*model.UserModel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userModelDo) Attrs(attrs ...field.AssignExpr) IUserModelDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userModelDo) Assign(attrs ...field.AssignExpr) IUserModelDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userModelDo) Joins(fields ...field.RelationField) IUserModelDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userModelDo) Preload(fields ...field.RelationField) IUserModelDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userModelDo) FirstOrInit() (*model.UserModel, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserModel), nil
	}
}

func (u userModelDo) FirstOrCreate() (*model.UserModel, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserModel), nil
	}
}

func (u userModelDo) FindByPage(offset int, limit int) (result []*model.UserModel, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userModelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userModelDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userModelDo) Delete(models ...*model.UserModel) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userModelDo) withDO(do gen.Dao) *userModelDo {
	u.DO = *do.(*gen.DO)
	return u
}
